Confirm Okta App Integration Details: Ask the Okta team to verify that the app is created as a “Web Application” or “OIDC - OpenID Connect” type, with “Authorization Code” grant type enabled (ideally with PKCE for security). If not, request updates and adjust the oauth2-proxy.cfg file accordingly (e.g., add PKCE settings if required).
•  Get/Verify Client ID and Secret: Obtain the exact Client ID and Client Secret from the Okta team, then update them in the secrets creation command in namespace-and-secrets.yaml. Test if they match the app’s configuration.
•  Validate Redirect URIs: Confirm with Okta team that the sign-in redirect URI is set to “https://aaportal.inl.gov/authorization-code/callback” (or http version if skipping HTTPS) and sign-out to “https://aaportal.inl.gov”. If mismatched, update Okta app settings and reflect in oauth2-proxy.cfg’s redirect_url.
•  Check Issuer URL: Verify the exact OIDC issuer URL (e.g., “https://inl.okta.com/oauth2/default”) with Okta team; update it in oauth2-proxy.cfg if different.
•  Confirm Email Claim Field: Double-check with Okta team that “preferred_username” indeed contains the user’s email in uppercase format (e.g., JOHN.SMITH@INL.GOV); if it’s a different claim, update oidc_email_claim in oauth2-proxy.cfg.
•  Verify Scopes and Access Policies: Ask Okta team if any specific scopes (e.g., openid, email) need to be requested for the token to include preferred_username; add to oauth2-proxy.cfg if needed (e.g., via scope parameter).
•  HTTPS Requirement Confirmation: Discuss with Okta/IT team if HTTPS is mandatory for redirects (common for production); if not feasible, switch to HTTP in configs as noted, but get approval to avoid security issues.
•  Domain and DNS Setup: Check with network/IT team that “aaportal.inl.gov” is resolvable internally and points to the BCM/K8s ingress; update host in nginx-ingress-routes.yaml if changed.
•  App Service Names and Ports: Verify with BCM/K8s admin or app devs the exact Kubernetes service names (e.g., maurogpt2-service) and ports (e.g., 8000) for each app; update them in nginx-ingress-routes.yaml paths.
•  Ingress Class and BCM Compatibility: Confirm with BCM admin that “ingressClassName: nginx” is correct; if not, update it in nginx-ingress-routes.yaml (e.g., to a custom class).
•  Test End-to-End Flow: After updates, request Okta/IT team to test a sample login and app access to ensure token extraction and header injection work; log any 403/unauthorized errors for debugging.
