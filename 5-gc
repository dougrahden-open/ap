import datetime
from cryptography import x509
from cryptography.x509.oid import NameOID
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.asymmetric import rsa
from cryptography.hazmat.primitives import serialization
from cryptography.hazmat.backends import default_backend

# Generate private key
key = rsa.generate_private_key(
    public_exponent=65537,
    key_size=2048,
    backend=default_backend()
)

# Generate a self-signed cert
subject = issuer = x509.Name([
    x509.NameAttribute(NameOID.COMMON_NAME, "aaportal.inl.gov"),
    x509.NameAttribute(NameOID.ORGANIZATION_NAME, "INL"),
    x509.NameAttribute(NameOID.COUNTRY_NAME, "US"),
])
cert = x509.CertificateBuilder().subject_name(
    subject
).issuer_name(
    issuer
).public_key(
    key.public_key()
).serial_number(
    x509.random_serial_number()
).not_valid_before(
    datetime.datetime.utcnow()
).not_valid_after(
    datetime.datetime.utcnow() + datetime.timedelta(days=365)
).add_extension(
    x509.SubjectAlternativeName([x509.DNSName("aaportal.inl.gov")]),
    critical=False,
).sign(key, hashes.SHA256(), default_backend())

# Write key to file
with open("tls.key", "wb") as f:
    f.write(key.private_bytes(
        encoding=serialization.Encoding.PEM,
        format=serialization.PrivateFormat.TraditionalOpenSSL,
        encryption_algorithm=serialization.NoEncryption(),
    ))

# Write cert to file
with open("tls.crt", "wb") as f:
    f.write(cert.public_bytes(serialization.Encoding.PEM))

print("Generated tls.key and tls.crt for aaportal.inl.gov")
